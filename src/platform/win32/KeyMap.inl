#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <axl.gl/KeyMap.hpp>
#include <axl.gl/KeyCodes.hpp>

namespace axl {
namespace gl {

KeyCode MapPlatformKeyCode(int platform_key_code)
{
	switch (platform_key_code)
	{
		case VK_LBUTTON: return KEY_LBUTTON;
		case VK_RBUTTON: return KEY_RBUTTON;
		case VK_CANCEL: return KEY_CANCEL;
		case VK_MBUTTON: return KEY_MBUTTON;
		case VK_BACK: return KEY_BACK;
		case VK_TAB: return KEY_TAB;
		case VK_CLEAR: return KEY_CLEAR;
		case VK_RETURN: return KEY_RETURN;
		case VK_SHIFT: return KEY_SHIFT;
		case VK_LSHIFT: return KEY_LSHIFT;
		case VK_RSHIFT: return KEY_RSHIFT;
		case VK_CONTROL: return KEY_CONTROL;
		case VK_LCONTROL: return KEY_LCONTROL;
		case VK_RCONTROL: return KEY_RCONTROL;
		case VK_MENU: return KEY_ALT;
		case VK_LMENU: return KEY_LALT;
		case VK_RMENU: return KEY_RALT;
		case VK_LWIN: return KEY_LCMD;
		case VK_RWIN: return KEY_RCMD;
		case VK_PAUSE: return KEY_PAUSE;
		case VK_CAPITAL: return KEY_CAPITAL;
		case VK_ESCAPE: return KEY_ESCAPE;
		case VK_SPACE: return KEY_SPACE;
		case VK_PRIOR: return KEY_PAGEUP;
		case VK_NEXT: return KEY_PAGEDOWN;
		case VK_END: return KEY_END;
		case VK_HOME: return KEY_HOME;
		case VK_LEFT: return KEY_LEFT;
		case VK_UP: return KEY_UP;
		case VK_RIGHT: return KEY_RIGHT;
		case VK_DOWN: return KEY_DOWN;
		case VK_SELECT: return KEY_SELECT;
		case VK_EXECUTE: return KEY_EXEC;
		case VK_SNAPSHOT: return KEY_SNAPSHOT;
		case VK_INSERT: return KEY_INSERT;
		case VK_DELETE: return KEY_DELETE;
		case VK_HELP: return KEY_HELP;
		case '0': return KEY_0;
		case '1': return KEY_1;
		case '2': return KEY_2;
		case '3': return KEY_3;
		case '4': return KEY_4;
		case '5': return KEY_5;
		case '6': return KEY_6;
		case '7': return KEY_7;
		case '8': return KEY_8;
		case '9': return KEY_9;
		case 'A': return KEY_A;
		case 'B': return KEY_B;
		case 'C': return KEY_C;
		case 'D': return KEY_D;
		case 'E': return KEY_E;
		case 'F': return KEY_F;
		case 'G': return KEY_G;
		case 'H': return KEY_H;
		case 'I': return KEY_I;
		case 'J': return KEY_J;
		case 'K': return KEY_K;
		case 'L': return KEY_L;
		case 'M': return KEY_M;
		case 'N': return KEY_N;
		case 'O': return KEY_O;
		case 'P': return KEY_P;
		case 'Q': return KEY_Q;
		case 'R': return KEY_R;
		case 'S': return KEY_S;
		case 'T': return KEY_T;
		case 'U': return KEY_U;
		case 'V': return KEY_V;
		case 'W': return KEY_W;
		case 'X': return KEY_X;
		case 'Y': return KEY_Y;
		case 'Z': return KEY_Z;
		case VK_NUMPAD0: return KEY_NUMPAD0;
		case VK_NUMPAD1: return KEY_NUMPAD1;
		case VK_NUMPAD2: return KEY_NUMPAD2;
		case VK_NUMPAD3: return KEY_NUMPAD3;
		case VK_NUMPAD4: return KEY_NUMPAD4;
		case VK_NUMPAD5: return KEY_NUMPAD5;
		case VK_NUMPAD6: return KEY_NUMPAD6;
		case VK_NUMPAD7: return KEY_NUMPAD7;
		case VK_NUMPAD8: return KEY_NUMPAD8;
		case VK_NUMPAD9: return KEY_NUMPAD9;
		case VK_MULTIPLY: return KEY_MULTIPLY;
		case VK_ADD: return KEY_ADD;
		case VK_SEPARATOR: return KEY_SEPARATOR;
		case VK_SUBTRACT: return KEY_SUBTRACT;
		case VK_DECIMAL: return KEY_DECIMAL;
		case VK_DIVIDE: return KEY_DIVIDE;
		case VK_F1: return KEY_F1;
		case VK_F2: return KEY_F2;
		case VK_F3: return KEY_F3;
		case VK_F4: return KEY_F4;
		case VK_F5: return KEY_F5;
		case VK_F6: return KEY_F6;
		case VK_F7: return KEY_F7;
		case VK_F8: return KEY_F8;
		case VK_F9: return KEY_F9;
		case VK_F10: return KEY_F10;
		case VK_F11: return KEY_F11;
		case VK_F12: return KEY_F12;
		case VK_F13: return KEY_F13;
		case VK_F14: return KEY_F14;
		case VK_F15: return KEY_F15;
		case VK_F16: return KEY_F16;
		case VK_F17: return KEY_F17;
		case VK_F18: return KEY_F18;
		case VK_F19: return KEY_F19;
		case VK_F20: return KEY_F20;
		case VK_F21: return KEY_F21;
		case VK_F22: return KEY_F22;
		case VK_F23: return KEY_F23;
		case VK_F24: return KEY_F24;
		case VK_NUMLOCK: return KEY_NUMLOCK;
		case VK_SCROLL: return KEY_SCROLL;
	}
	return KEY_UNKNOWN;
}
int MapKeyCode(KeyCode key_code)
{
	switch (key_code)
	{
		case KEY_LBUTTON: return VK_LBUTTON;
		case KEY_RBUTTON: return VK_RBUTTON;
		case KEY_CANCEL: return VK_CANCEL;
		case KEY_MBUTTON: return VK_MBUTTON;
		case KEY_BACK: return VK_BACK;
		case KEY_TAB: return VK_TAB;
		case KEY_CLEAR: return VK_CLEAR;
		case KEY_RETURN: return VK_RETURN;
		case KEY_SHIFT: return VK_SHIFT;
		case KEY_LSHIFT: return VK_LSHIFT;
		case KEY_RSHIFT: return VK_RSHIFT;
		case KEY_CONTROL: return VK_CONTROL;
		case KEY_LCONTROL: return VK_LCONTROL;
		case KEY_RCONTROL: return VK_RCONTROL;
		case KEY_ALT: return VK_MENU;
		case KEY_LALT: return VK_LMENU;
		case KEY_RALT: return VK_RMENU;
		case KEY_LCMD: return VK_LWIN;
		case KEY_RCMD: return VK_RWIN;
		case KEY_PAUSE: return VK_PAUSE;
		case KEY_CAPITAL: return VK_CAPITAL;
		case KEY_ESCAPE: return VK_ESCAPE;
		case KEY_SPACE: return VK_SPACE;
		case KEY_PAGEUP: return VK_PRIOR;
		case KEY_PAGEDOWN: return VK_NEXT;
		case KEY_END: return VK_END;
		case KEY_HOME: return VK_HOME;
		case KEY_LEFT: return VK_LEFT;
		case KEY_UP: return VK_UP;
		case KEY_RIGHT: return VK_RIGHT;
		case KEY_DOWN: return VK_DOWN;
		case KEY_SELECT: return VK_SELECT;
		case KEY_EXEC: return VK_EXECUTE;
		case KEY_SNAPSHOT: return VK_SNAPSHOT;
		case KEY_INSERT: return VK_INSERT;
		case KEY_DELETE: return VK_DELETE;
		case KEY_HELP: return VK_HELP;
		case KEY_0: return '0';
		case KEY_1: return '1';
		case KEY_2: return '2';
		case KEY_3: return '3';
		case KEY_4: return '4';
		case KEY_5: return '5';
		case KEY_6: return '6';
		case KEY_7: return '7';
		case KEY_8: return '8';
		case KEY_9: return '9';
		case KEY_A: return 'A';
		case KEY_B: return 'B';
		case KEY_C: return 'C';
		case KEY_D: return 'D';
		case KEY_E: return 'E';
		case KEY_F: return 'F';
		case KEY_G: return 'G';
		case KEY_H: return 'H';
		case KEY_I: return 'I';
		case KEY_J: return 'J';
		case KEY_K: return 'K';
		case KEY_L: return 'L';
		case KEY_M: return 'M';
		case KEY_N: return 'N';
		case KEY_O: return 'O';
		case KEY_P: return 'P';
		case KEY_Q: return 'Q';
		case KEY_R: return 'R';
		case KEY_S: return 'S';
		case KEY_T: return 'T';
		case KEY_U: return 'U';
		case KEY_V: return 'V';
		case KEY_W: return 'W';
		case KEY_X: return 'X';
		case KEY_Y: return 'Y';
		case KEY_Z: return 'Z';
		case KEY_NUMPAD0: return VK_NUMPAD0;
		case KEY_NUMPAD1: return VK_NUMPAD1;
		case KEY_NUMPAD2: return VK_NUMPAD2;
		case KEY_NUMPAD3: return VK_NUMPAD3;
		case KEY_NUMPAD4: return VK_NUMPAD4;
		case KEY_NUMPAD5: return VK_NUMPAD5;
		case KEY_NUMPAD6: return VK_NUMPAD6;
		case KEY_NUMPAD7: return VK_NUMPAD7;
		case KEY_NUMPAD8: return VK_NUMPAD8;
		case KEY_NUMPAD9: return VK_NUMPAD9;
		case KEY_MULTIPLY: return VK_MULTIPLY;
		case KEY_ADD: return VK_ADD;
		case KEY_SEPARATOR: return VK_SEPARATOR;
		case KEY_SUBTRACT: return VK_SUBTRACT;
		case KEY_DECIMAL: return VK_DECIMAL;
		case KEY_DIVIDE: return VK_DIVIDE;
		case KEY_F1: return VK_F1;
		case KEY_F2: return VK_F2;
		case KEY_F3: return VK_F3;
		case KEY_F4: return VK_F4;
		case KEY_F5: return VK_F5;
		case KEY_F6: return VK_F6;
		case KEY_F7: return VK_F7;
		case KEY_F8: return VK_F8;
		case KEY_F9: return VK_F9;
		case KEY_F10: return VK_F10;
		case KEY_F11: return VK_F11;
		case KEY_F12: return VK_F12;
		case KEY_F13: return VK_F13;
		case KEY_F14: return VK_F14;
		case KEY_F15: return VK_F15;
		case KEY_F16: return VK_F16;
		case KEY_F17: return VK_F17;
		case KEY_F18: return VK_F18;
		case KEY_F19: return VK_F19;
		case KEY_F20: return VK_F20;
		case KEY_F21: return VK_F21;
		case KEY_F22: return VK_F22;
		case KEY_F23: return VK_F23;
		case KEY_F24: return VK_F24;
		case KEY_NUMLOCK: return VK_NUMLOCK;
		case KEY_SCROLL: return VK_SCROLL;
	}
	return (int)key_code;
}

} // namespace axl.gl
} // namespace axl